var http_1 = require("services/http");
var config_1 = require("../config");
var task_1 = require('../components/tasks/task');
var TaskServiceImpl = (function () {
    function TaskServiceImpl() {
    }
    TaskServiceImpl.prototype.getTasks = function () {
        var token = localStorage.getItem("jwt");
        return http_1.$http.get(config_1.REST_HOST + "/api/tasks/tim", token);
    };
    TaskServiceImpl.prototype.addTask = function (task) {
        var token = localStorage.getItem("jwt");
        return http_1.$http.post(config_1.REST_HOST + "/api/tasks/tim", task, token);
    };
    return TaskServiceImpl;
})();
exports.TaskServiceImpl = TaskServiceImpl;
var TaskServiceOfflineImpl = (function () {
    function TaskServiceOfflineImpl() {
        this.goRun = new task_1.Task("Go for a run", 1);
        this.goShower = new task_1.Task("Go have a shower", 2);
        this.tasks = new Array();
        this.tasks.push(this.goRun);
        this.tasks.push(this.goShower);
    }
    TaskServiceOfflineImpl.prototype.getTasks = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: that.tasks });
        });
    };
    TaskServiceOfflineImpl.prototype.addTask = function (task) {
        var nextId = this.tasks.length++;
        task.setId(nextId);
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: nextId } });
        });
    };
    return TaskServiceOfflineImpl;
})();
exports.TaskServiceOfflineImpl = TaskServiceOfflineImpl;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL1Rhc2tTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlRhc2tTZXJ2aWNlSW1wbCIsIlRhc2tTZXJ2aWNlSW1wbC5jb25zdHJ1Y3RvciIsIlRhc2tTZXJ2aWNlSW1wbC5nZXRUYXNrcyIsIlRhc2tTZXJ2aWNlSW1wbC5hZGRUYXNrIiwiVGFza1NlcnZpY2VPZmZsaW5lSW1wbCIsIlRhc2tTZXJ2aWNlT2ZmbGluZUltcGwuY29uc3RydWN0b3IiLCJUYXNrU2VydmljZU9mZmxpbmVJbXBsLmdldFRhc2tzIiwiVGFza1NlcnZpY2VPZmZsaW5lSW1wbC5hZGRUYXNrIl0sIm1hcHBpbmdzIjoiQUFBQSxxQkFBb0IsZUFBZSxDQUFDLENBQUE7QUFDcEMsdUJBQXdCLFdBQVcsQ0FBQyxDQUFBO0FBQ3BDLHFCQUFtQiwwQkFBMEIsQ0FBQyxDQUFBO0FBTzlDO0lBQUFBO0lBa0JBQyxDQUFDQTtJQWJPRCxrQ0FBUUEsR0FBZkE7UUFDQ0UsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLE1BQU1BLENBQUNBLFlBQUtBLENBQUNBLEdBQUdBLENBQUNBLGtCQUFTQSxHQUFHQSxnQkFBZ0JBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO0lBQ3ZEQSxDQUFDQTtJQU1NRixpQ0FBT0EsR0FBZEEsVUFBZUEsSUFBVUE7UUFDeEJHLElBQUlBLEtBQUtBLEdBQUdBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3hDQSxNQUFNQSxDQUFDQSxZQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBU0EsR0FBR0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUM5REEsQ0FBQ0E7SUFDRkgsc0JBQUNBO0FBQURBLENBbEJBLElBa0JDO0FBbEJZLHVCQUFlLGtCQWtCM0IsQ0FBQTtBQUVEO0lBS0NJO1FBSlFDLFVBQUtBLEdBQVNBLElBQUlBLFdBQUlBLENBQUNBLGNBQWNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzFDQSxhQUFRQSxHQUFTQSxJQUFJQSxXQUFJQSxDQUFDQSxrQkFBa0JBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ2pEQSxVQUFLQSxHQUFnQkEsSUFBSUEsS0FBS0EsRUFBUUEsQ0FBQ0E7UUFHOUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFLTUQseUNBQVFBLEdBQWZBO1FBQ0NFLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2hCQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUNqQkEsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7WUFDdkIsT0FBTyxDQUFDLEVBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FDREEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFDTUYsd0NBQU9BLEdBQWRBLFVBQWVBLElBQVNBO1FBQ3ZCRyxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUNqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDbkJBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQ2pCQSxVQUFTQSxPQUFPQSxFQUFFQSxNQUFNQTtZQUN2QixPQUFPLENBQUMsRUFBQyxZQUFZLEVBQUUsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FDREEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFDRkgsNkJBQUNBO0FBQURBLENBOUJBLElBOEJDO0FBOUJZLDhCQUFzQix5QkE4QmxDLENBQUEiLCJmaWxlIjoic2VydmljZXMvVGFza1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyRodHRwfSBmcm9tIFwic2VydmljZXMvaHR0cFwiO1xuaW1wb3J0IHtSRVNUX0hPU1R9IGZyb20gXCIuLi9jb25maWdcIjtcbmltcG9ydCB7VGFza30gZnJvbSAnLi4vY29tcG9uZW50cy90YXNrcy90YXNrJztcblxuZXhwb3J0IGludGVyZmFjZSBUYXNrU2VydmljZSB7XG5cdGdldFRhc2tzKCk6IFByb21pc2U8YW55Pjtcblx0YWRkVGFzayh0YXNrOlRhc2spOiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBjbGFzcyBUYXNrU2VydmljZUltcGwgaW1wbGVtZW50cyBUYXNrU2VydmljZSB7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIGEgbGlzdCBvZiBUYXNrIG9iamVjdHMgYXMgYSBKYXZhU2NyaXB0IEFycmF5XG5cdCAqL1xuXHRwdWJsaWMgZ2V0VGFza3MoKTogUHJvbWlzZTxhbnk+IHtcblx0XHRsZXQgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImp3dFwiKTtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KFJFU1RfSE9TVCArIFwiL2FwaS90YXNrcy90aW1cIiwgdG9rZW4pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB0YXNrIGlzIGEgVGFzayBvYmplY3Rcblx0ICogQHJldHVybnMgc2VydmVyIF9pZCBvZiBuZXdseSBjcmVhdGVkIHRhc2tcblx0ICovXG5cdHB1YmxpYyBhZGRUYXNrKHRhc2s6IFRhc2spOlByb21pc2U8YW55PiB7XG5cdFx0bGV0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJqd3RcIik7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoUkVTVF9IT1NUICsgXCIvYXBpL3Rhc2tzL3RpbVwiLCB0YXNrLCB0b2tlbik7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tTZXJ2aWNlT2ZmbGluZUltcGwgaW1wbGVtZW50cyBUYXNrU2VydmljZSB7XG5cdHByaXZhdGUgZ29SdW46IFRhc2sgPSBuZXcgVGFzayhcIkdvIGZvciBhIHJ1blwiLCAxKTtcblx0cHJpdmF0ZSBnb1Nob3dlcjogVGFzayA9IG5ldyBUYXNrKFwiR28gaGF2ZSBhIHNob3dlclwiLCAyKTtcblx0cHJpdmF0ZSB0YXNrczogQXJyYXk8VGFzaz4gPSBuZXcgQXJyYXk8VGFzaz4oKTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnRhc2tzLnB1c2godGhpcy5nb1J1bik7XG5cdFx0dGhpcy50YXNrcy5wdXNoKHRoaXMuZ29TaG93ZXIpO1xuXHR9XG5cblx0Ly97X2lkOiAxLCB1c2VyX2lkOiAxLCBkZXNjcmlwdGlvbjogXCJkZXNjcmlwdGlvblwiLCB0aXRsZTogXCJHbyBmb3IgYSBydW5cIiwgYXNzaWduZWU6IFwiQXNzaWduZWVcIn0sXG5cdC8ve19pZDogMiwgdXNlcl9pZDogMSwgZGVzY3JpcHRpb246IFwiZGVzY3JpcHRpb25cIiwgdGl0bGU6IFwiU2hvd2VyXCIsIGFzc2lnbmVlOiBcIkFzc2lnbmVlXCJ9LFxuXG5cdHB1YmxpYyBnZXRUYXNrcygpOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCB0aGF0ID0gdGhpcztcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoXG5cdFx0XHRmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0cmVzb2x2ZSh7YWN0aW9uUmVzdWx0OiB0aGF0LnRhc2tzfSk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxuXHRwdWJsaWMgYWRkVGFzayh0YXNrOlRhc2spOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCBuZXh0SWQgPSB0aGlzLnRhc2tzLmxlbmd0aCsrO1xuXHRcdHRhc2suc2V0SWQobmV4dElkKTtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoXG5cdFx0XHRmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0cmVzb2x2ZSh7YWN0aW9uUmVzdWx0OiB7X2lkOiBuZXh0SWR9fSk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9