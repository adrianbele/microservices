var http_1 = require("services/http");
var config_1 = require("../config");
var task_1 = require('../components/tasks/task');
var TaskServiceImpl = (function () {
    function TaskServiceImpl() {
    }
    TaskServiceImpl.prototype.getTasks = function () {
        var token = localStorage.getItem("jwt");
        return http_1.$http.get(config_1.REST_HOST + "/api/tasks/tim", token);
    };
    TaskServiceImpl.prototype.addTask = function (task) {
        var token = localStorage.getItem("jwt");
        return http_1.$http.post(config_1.REST_HOST + "/api/tasks/tim", task, token);
    };
    TaskServiceImpl.prototype.updateTask = function (task) {
        var token = localStorage.getItem("jwt");
        return http_1.$http.put(config_1.REST_HOST + "/api/tasks/tim", task, token);
    };
    TaskServiceImpl.prototype.deleteTask = function (task) {
        var token = localStorage.getItem("jwt");
        return http_1.$http.delete(config_1.REST_HOST + "/api/tasks/tim", task, token);
    };
    return TaskServiceImpl;
})();
exports.TaskServiceImpl = TaskServiceImpl;
var TaskServiceOfflineImpl = (function () {
    function TaskServiceOfflineImpl() {
        this.goRun = new task_1.Task("Go for a run", 1);
        this.goShower = new task_1.Task("Go have a shower", 2);
        this.tasks = new Array();
        this.tasks.push(this.goRun);
        this.tasks.push(this.goShower);
    }
    TaskServiceOfflineImpl.prototype.getTasks = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: that.tasks });
        });
    };
    TaskServiceOfflineImpl.prototype.addTask = function (task) {
        var nextId = this.tasks.length++;
        task.setId(nextId);
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: nextId } });
        });
    };
    TaskServiceOfflineImpl.prototype.updateTask = function (task) {
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: task._id } });
        });
    };
    TaskServiceOfflineImpl.prototype.deleteTask = function (task) {
        return new Promise(function (resolve, reject) {
            resolve({ actionResult: { _id: task._id } });
        });
    };
    return TaskServiceOfflineImpl;
})();
exports.TaskServiceOfflineImpl = TaskServiceOfflineImpl;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL1Rhc2tTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIlRhc2tTZXJ2aWNlSW1wbCIsIlRhc2tTZXJ2aWNlSW1wbC5jb25zdHJ1Y3RvciIsIlRhc2tTZXJ2aWNlSW1wbC5nZXRUYXNrcyIsIlRhc2tTZXJ2aWNlSW1wbC5hZGRUYXNrIiwiVGFza1NlcnZpY2VJbXBsLnVwZGF0ZVRhc2siLCJUYXNrU2VydmljZUltcGwuZGVsZXRlVGFzayIsIlRhc2tTZXJ2aWNlT2ZmbGluZUltcGwiLCJUYXNrU2VydmljZU9mZmxpbmVJbXBsLmNvbnN0cnVjdG9yIiwiVGFza1NlcnZpY2VPZmZsaW5lSW1wbC5nZXRUYXNrcyIsIlRhc2tTZXJ2aWNlT2ZmbGluZUltcGwuYWRkVGFzayIsIlRhc2tTZXJ2aWNlT2ZmbGluZUltcGwudXBkYXRlVGFzayIsIlRhc2tTZXJ2aWNlT2ZmbGluZUltcGwuZGVsZXRlVGFzayJdLCJtYXBwaW5ncyI6IkFBQUEscUJBQW9CLGVBQWUsQ0FBQyxDQUFBO0FBQ3BDLHVCQUF3QixXQUFXLENBQUMsQ0FBQTtBQUNwQyxxQkFBbUIsMEJBQTBCLENBQUMsQ0FBQTtBQVM5QztJQUFBQTtJQW9DQUMsQ0FBQ0E7SUEvQk9ELGtDQUFRQSxHQUFmQTtRQUNDRSxJQUFJQSxLQUFLQSxHQUFHQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUN4Q0EsTUFBTUEsQ0FBQ0EsWUFBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0JBQVNBLEdBQUdBLGdCQUFnQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDdkRBLENBQUNBO0lBTU1GLGlDQUFPQSxHQUFkQSxVQUFlQSxJQUFVQTtRQUN4QkcsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLE1BQU1BLENBQUNBLFlBQUtBLENBQUNBLElBQUlBLENBQUNBLGtCQUFTQSxHQUFHQSxnQkFBZ0JBLEVBQUVBLElB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Q0RBLENBQUNBO0lBQ0hBLENBQUNBO0lBQ0ZMLDZCQUFDQTtBQUFEQSxDQTlDQSxJQThDQztBQTlDWSw4QkFBc0IseUJBOENsQyxDQUFBIiwiZmlsZSI6InNlcnZpY2VzL1Rhc2tTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHskaHR0cH0gZnJvbSBcInNlcnZpY2VzL2h0dHBcIjtcbmltcG9ydCB7UkVTVF9IT1NUfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQge1Rhc2t9IGZyb20gJy4uL2NvbXBvbmVudHMvdGFza3MvdGFzayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFza1NlcnZpY2Uge1xuXHRnZXRUYXNrcygpOiBQcm9taXNlPGFueT47XG5cdGFkZFRhc2sodGFzazpUYXNrKTogUHJvbWlzZTxhbnk+O1xuXHR1cGRhdGVUYXNrKHRhc2s6IFRhc2spOiBQcm9taXNlPGFueT47XG5cdGRlbGV0ZVRhc2sodGFzazogVGFzayk6IFByb21pc2U8YW55Pjtcbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tTZXJ2aWNlSW1wbCBpbXBsZW1lbnRzIFRhc2tTZXJ2aWNlIHtcblxuXHQvKipcblx0ICogQHJldHVybnMgYSBsaXN0IG9mIFRhc2sgb2JqZWN0cyBhcyBhIEphdmFTY3JpcHQgQXJyYXlcblx0ICovXG5cdHB1YmxpYyBnZXRUYXNrcygpOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiand0XCIpO1xuXHRcdHJldHVybiAkaHR0cC5nZXQoUkVTVF9IT1NUICsgXCIvYXBpL3Rhc2tzL3RpbVwiLCB0b2tlbik7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHRhc2sgaXMgYSBUYXNrIG9iamVjdFxuXHQgKiBAcmV0dXJucyBzZXJ2ZXIgX2lkIG9mIG5ld2x5IGNyZWF0ZWQgdGFza1xuXHQgKi9cblx0cHVibGljIGFkZFRhc2sodGFzazogVGFzayk6UHJvbWlzZTxhbnk+IHtcblx0XHRsZXQgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImp3dFwiKTtcblx0XHRyZXR1cm4gJGh0dHAucG9zdChSRVNUX0hPU1QgKyBcIi9hcGkvdGFza3MvdGltXCIsIHRhc2ssIHRva2VuKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0gdGFzayBpcyBhIFRhc2sgb2JqZWN0XG5cdCAqIEByZXR1cm5zIHNlcnZlciBfaWQgb2YgdXBkYXRlZCB0YXNrXG5cdCAqL1xuXHRwdWJsaWMgdXBkYXRlVGFzayh0YXNrOiBUYXNrKTogUHJvbWlzZTxhbnk+IHtcblx0XHRsZXQgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImp3dFwiKTtcblx0XHRyZXR1cm4gJGh0dHAucHV0KFJFU1RfSE9TVCArIFwiL2FwaS90YXNrcy90aW1cIiwgdGFzaywgdG9rZW4pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB0YXNrIGlzIGEgVGFzayBvYmplY3Rcblx0ICogQHJldHVybnMgc2VydmVyIF9pZCBvZiBkZWxldGVkIHRhc2tcblx0ICovXG5cdHB1YmxpYyBkZWxldGVUYXNrKHRhc2s6IFRhc2spOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiand0XCIpO1xuXHRcdHJldHVybiAkaHR0cC5kZWxldGUoUkVTVF9IT1NUICsgXCIvYXBpL3Rhc2tzL3RpbVwiLCB0YXNrLCB0b2tlbik7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tTZXJ2aWNlT2ZmbGluZUltcGwgaW1wbGVtZW50cyBUYXNrU2VydmljZSB7XG5cdHByaXZhdGUgZ29SdW46IFRhc2sgPSBuZXcgVGFzayhcIkdvIGZvciBhIHJ1blwiLCAxKTtcblx0cHJpdmF0ZSBnb1Nob3dlcjogVGFzayA9IG5ldyBUYXNrKFwiR28gaGF2ZSBhIHNob3dlclwiLCAyKTtcblx0cHJpdmF0ZSB0YXNrczogQXJyYXk8VGFzaz4gPSBuZXcgQXJyYXk8VGFzaz4oKTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnRhc2tzLnB1c2godGhpcy5nb1J1bik7XG5cdFx0dGhpcy50YXNrcy5wdXNoKHRoaXMuZ29TaG93ZXIpO1xuXHR9XG5cblx0Ly97X2lkOiAxLCB1c2VyX2lkOiAxLCBkZXNjcmlwdGlvbjogXCJkZXNjcmlwdGlvblwiLCB0aXRsZTogXCJHbyBmb3IgYSBydW5cIiwgYXNzaWduZWU6IFwiQXNzaWduZWVcIn0sXG5cdC8ve19pZDogMiwgdXNlcl9pZDogMSwgZGVzY3JpcHRpb246IFwiZGVzY3JpcHRpb25cIiwgdGl0bGU6IFwiU2hvd2VyXCIsIGFzc2lnbmVlOiBcIkFzc2lnbmVlXCJ9LFxuXG5cdHB1YmxpYyBnZXRUYXNrcygpOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCB0aGF0ID0gdGhpcztcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoXG5cdFx0XHRmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0cmVzb2x2ZSh7YWN0aW9uUmVzdWx0OiB0aGF0LnRhc2tzfSk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxuXHRwdWJsaWMgYWRkVGFzayh0YXNrOlRhc2spOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCBuZXh0SWQgPSB0aGlzLnRhc2tzLmxlbmd0aCsrO1xuXHRcdHRhc2suc2V0SWQobmV4dElkKTtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoXG5cdFx0XHRmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0cmVzb2x2ZSh7YWN0aW9uUmVzdWx0OiB7X2lkOiBuZXh0SWR9fSk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxuXHRwdWJsaWMgdXBkYXRlVGFzayh0YXNrOiBUYXNrKTogUHJvbWlzZTxhbnk+IHtcblx0XHQvLyBUT0RPIGltcGxlbWVudFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShcblx0XHRcdGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XHRyZXNvbHZlKHthY3Rpb25SZXN1bHQ6IHtfaWQ6IHRhc2suX2lkfX0pO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblx0cHVibGljIGRlbGV0ZVRhc2sodGFzazogVGFzayk6IFByb21pc2U8YW55PiB7XG5cdFx0Ly8gVE9ETyBpbXBsZW1lbnRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoXG5cdFx0XHRmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0cmVzb2x2ZSh7YWN0aW9uUmVzdWx0OiB7X2lkOiB0YXNrLl9pZH19KTtcblx0XHRcdH1cblx0XHQpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=