// TODO make string an optional parameter with ''?''
exports.$http = {
    get: function (url, token) {
        return _sendRequest(url, null, 'GET', token);
    },
    post: function (url, payload, token) {
        return _sendRequest(url, payload, 'POST', token);
    },
    put: function (url, payload, token) {
        return _sendRequest(url, payload, 'PUT', token);
    },
    delete: function (url, payload, token) {
        return _sendRequest(url, null, 'DELETE', token);
    }
};
function _sendRequest(url, payLoad, type, token) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.timeout = 10 * 1000;
        req.open(type, url);
        if (payLoad && (typeof payLoad !== "string")) {
            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        }
        else {
            req.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        }
        if (token && token !== null) {
            req.setRequestHeader("Authorization", "Bearer " + token);
        }
        req.onload = function () {
            if (req.status == 200) {
                if (req.response.startsWith("{")) {
                    resolve(JSON.parse(req.response));
                }
                else {
                    resolve(req.response);
                }
            }
            else {
                reject(JSON.parse(req.response));
            }
        };
        req.onerror = function () {
            reject(req.response);
        };
        req.ontimeout = function () {
            reject("server does not respond");
        };
        if (payLoad) {
            req.send(JSON.stringify(payLoad));
        }
        else {
            req.send(null);
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2h0dHAudHMiXSwibmFtZXMiOlsiX3NlbmRSZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFDQSxvREFBb0Q7QUFFdkMsYUFBSyxHQUFHO0lBQ2pCLEdBQUcsRUFBRSxVQUFTLEdBQVcsRUFBRSxLQUFhO1FBQ3BDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNELElBQUksRUFBRSxVQUFTLEdBQVcsRUFBRSxPQUFZLEVBQUUsS0FBYTtRQUNuRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDRCxHQUFHLEVBQUUsVUFBUyxHQUFXLEVBQUUsT0FBWSxFQUFFLEtBQWE7UUFDbEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsTUFBTSxFQUFFLFVBQVMsR0FBVyxFQUFFLE9BQVksRUFBRSxLQUFhO1FBQ3JELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKLENBQUE7QUFNRCxzQkFBc0IsR0FBVyxFQUFFLE9BQVksRUFBRSxJQUFZLEVBQUUsS0FBYTtJQUN4RUEsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7UUFDdkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUMvQixHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFHcEIsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztRQUMzRSxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixHQUFHLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDckUsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQixHQUFHLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBRUQsR0FBRyxDQUFDLE1BQU0sR0FBRztZQUNULEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDdEMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQixDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixHQUFHLENBQUMsT0FBTyxHQUFHO1lBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUM7UUFFTCxHQUFHLENBQUMsU0FBUyxHQUFHO1lBQ2YsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFBO1FBRUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsQ0FBQztJQUNMLENBQUMsQ0FBQ0EsQ0FBQ0E7QUFDUEEsQ0FBQ0EiLCJmaWxlIjoic2VydmljZXMvaHR0cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gVE9ETyBtYWtlIHN0cmluZyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgd2l0aCAnJz8nJ1xuXG5leHBvcnQgY29uc3QgJGh0dHAgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbih1cmw6IHN0cmluZywgdG9rZW46IHN0cmluZykge1xuICAgICAgICByZXR1cm4gX3NlbmRSZXF1ZXN0KHVybCwgbnVsbCwgJ0dFVCcsIHRva2VuKTtcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIF9zZW5kUmVxdWVzdCh1cmwsIHBheWxvYWQsICdQT1NUJywgdG9rZW4pO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbih1cmw6IHN0cmluZywgcGF5bG9hZDogYW55LCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBfc2VuZFJlcXVlc3QodXJsLCBwYXlsb2FkLCAnUFVUJywgdG9rZW4pO1xuICAgIH0sXG4gICAgZGVsZXRlOiBmdW5jdGlvbih1cmw6IHN0cmluZywgcGF5bG9hZDogYW55LCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBfc2VuZFJlcXVlc3QodXJsLCBudWxsLCAnREVMRVRFJywgdG9rZW4pO1xuICAgIH1cbn1cblxuLyoqXG4qIEBwYXJhbSBwYXlsb2FkIGlzIGEgSmF2YVNjcmlwdC9KU09OIE9iamVjdFxuKiBAcGFyYW0gdHlwZSBpcyB0aGUgSFRUUCB2ZXJiIGFzIFN0cmluZ1xuKi9cbmZ1bmN0aW9uIF9zZW5kUmVxdWVzdCh1cmw6IHN0cmluZywgcGF5TG9hZDogYW55LCB0eXBlOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICByZXEudGltZW91dCA9IDEwICogMTAwMDtcbiAgICAgICAgcmVxLm9wZW4odHlwZSwgdXJsKTtcblxuICAgICAgICAvLyBzdXBwb3J0IGZvciBjb250ZW50LXR5cGUgaW5mZXJlbmNlIGFuZCBoYW5kbGluZyBhY2NvcmRpbmdseVxuICAgICAgICBpZiAocGF5TG9hZCAmJiAodHlwZW9mIHBheUxvYWQgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlbmQgSnNvbiBXZWIgVG9rZW5cbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlc3BvbnNlLnN0YXJ0c1dpdGgoXCJ7XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlcS5yZXNwb25zZSk7XG4gICAgICAgIH07XG5cblx0ICAgIHJlcS5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcblx0XHQgICAgcmVqZWN0KFwic2VydmVyIGRvZXMgbm90IHJlc3BvbmRcIik7XG5cdCAgICB9XG5cbiAgICAgICAgaWYgKHBheUxvYWQpIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKEpTT04uc3RyaW5naWZ5KHBheUxvYWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKG51bGwpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=