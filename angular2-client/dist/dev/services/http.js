// TODO make token an optional parameter with ''?''
exports.$http = {
    get: function (url, token) {
        return sendRequest(url, null, 'GET', token);
    },
    post: function (url, payload, token) {
        return sendRequest(url, payload, 'POST', token);
    },
    put: function (url, payload, token) {
        return sendRequest(url, payload, 'PUT', token);
    },
    delete: function (url, payload, token) {
        return sendRequest(url, null, 'DELETE', token);
    }
};
function sendRequest(url, payLoad, type, token) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.timeout = 10 * 1000;
        req.open(type, url);
        if (payLoad && (typeof payLoad !== "string")) {
            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        }
        else {
            req.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        }
        if (token && token !== null) {
            req.setRequestHeader("Authorization", "Bearer " + token);
        }
        req.onload = function () {
            if (req.status == 200) {
                if (req.response.startsWith("{")) {
                    resolve(JSON.parse(req.response));
                }
                else {
                    resolve(req.response);
                }
            }
            else {
                reject(JSON.parse(req.response));
            }
        };
        req.onerror = function () {
            reject(req.response);
        };
        req.ontimeout = function () {
            reject("server does not respond");
        };
        if (payLoad) {
            req.send(JSON.stringify(payLoad));
        }
        else {
            req.send(null);
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2h0dHAudHMiXSwibmFtZXMiOlsic2VuZFJlcXVlc3QiXSwibWFwcGluZ3MiOiJBQUNBLG1EQUFtRDtBQUV0QyxhQUFLLEdBQUc7SUFDakIsR0FBRyxFQUFFLFVBQVMsR0FBVyxFQUFFLEtBQWE7UUFDcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBSSxFQUFFLFVBQVMsR0FBVyxFQUFFLE9BQVksRUFBRSxLQUFhO1FBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELEdBQUcsRUFBRSxVQUFTLEdBQVcsRUFBRSxPQUFZLEVBQUUsS0FBYTtRQUNsRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRCxNQUFNLEVBQUUsVUFBUyxHQUFXLEVBQUUsT0FBWSxFQUFFLEtBQWE7UUFDckQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0osQ0FBQTtBQVNELHFCQUFxQixHQUFXLEVBQUUsT0FBWSxFQUFFLElBQVksRUFBRSxLQUFhO0lBQ3ZFQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFTQSxPQUFPQSxFQUFFQSxNQUFNQTtRQUN2QyxJQUFJLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUdwQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFFRCxHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLEdBQUcsQ0FBQyxPQUFPLEdBQUc7WUFDVixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVMLEdBQUcsQ0FBQyxTQUFTLEdBQUc7WUFDZixNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUE7UUFFRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixDQUFDO0lBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtBQUNQQSxDQUFDQSIsImZpbGUiOiJzZXJ2aWNlcy9odHRwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBUT0RPIG1ha2UgdG9rZW4gYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHdpdGggJyc/JydcblxuZXhwb3J0IGNvbnN0ICRodHRwID0ge1xuICAgIGdldDogZnVuY3Rpb24odXJsOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHVybCwgbnVsbCwgJ0dFVCcsIHRva2VuKTtcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHVybCwgcGF5bG9hZCwgJ1BPU1QnLCB0b2tlbik7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHVybCwgcGF5bG9hZCwgJ1BVVCcsIHRva2VuKTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwgdG9rZW46IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3QodXJsLCBudWxsLCAnREVMRVRFJywgdG9rZW4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gdXJsIGlzIHRoZSBlbmRwb2ludCB0byBzZW5kXG4gKiBAcGFyYW0gcGF5TG9hZCBpcyBhIEphdmFTY3JpcHQvSlNPTiBPYmplY3RcbiAqIEBwYXJhbSB0eXBlIGlzIHRoZSBIVFRQIHZlcmIgYXMgU3RyaW5nXG4gKiBAcGFyYW0gdG9rZW4gaXMgdXNlZCBmb3IgYXV0aGVudGljYXRpb25cbiAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gcmVzcG9uc2UgaXMgcmVjZWl2ZWRcbiovXG5mdW5jdGlvbiBzZW5kUmVxdWVzdCh1cmw6IHN0cmluZywgcGF5TG9hZDogYW55LCB0eXBlOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICByZXEudGltZW91dCA9IDEwICogMTAwMDtcbiAgICAgICAgcmVxLm9wZW4odHlwZSwgdXJsKTtcblxuICAgICAgICAvLyBzdXBwb3J0IGZvciBjb250ZW50LXR5cGUgaW5mZXJlbmNlIGFuZCBoYW5kbGluZyBhY2NvcmRpbmdseVxuICAgICAgICBpZiAocGF5TG9hZCAmJiAodHlwZW9mIHBheUxvYWQgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlbmQgSnNvbiBXZWIgVG9rZW5cbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlc3BvbnNlLnN0YXJ0c1dpdGgoXCJ7XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlcS5yZXNwb25zZSk7XG4gICAgICAgIH07XG5cblx0ICAgIHJlcS5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcblx0XHQgICAgcmVqZWN0KFwic2VydmVyIGRvZXMgbm90IHJlc3BvbmRcIik7XG5cdCAgICB9XG5cbiAgICAgICAgaWYgKHBheUxvYWQpIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKEpTT04uc3RyaW5naWZ5KHBheUxvYWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKG51bGwpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=