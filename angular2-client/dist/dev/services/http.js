// TODO make string an optional parameter with ''?''
exports.$http = {
    get: function (url, token) {
        return sendRequest(url, null, 'GET', token);
    },
    post: function (url, payload, token) {
        return sendRequest(url, payload, 'POST', token);
    },
    put: function (url, payload, token) {
        return sendRequest(url, payload, 'PUT', token);
    },
    delete: function (url, payload, token) {
        return sendRequest(url, null, 'DELETE', token);
    }
};
function sendRequest(url, payLoad, type, token) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.timeout = 10 * 1000;
        req.open(type, url);
        if (payLoad && (typeof payLoad !== "string")) {
            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        }
        else {
            req.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        }
        if (token && token !== null) {
            req.setRequestHeader("Authorization", "Bearer " + token);
        }
        req.onload = function () {
            if (req.status == 200) {
                if (req.response.startsWith("{")) {
                    resolve(JSON.parse(req.response));
                }
                else {
                    resolve(req.response);
                }
            }
            else {
                reject(JSON.parse(req.response));
            }
        };
        req.onerror = function () {
            reject(req.response);
        };
        req.ontimeout = function () {
            reject("server does not respond");
        };
        if (payLoad) {
            req.send(JSON.stringify(payLoad));
        }
        else {
            req.send(null);
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2h0dHAudHMiXSwibmFtZXMiOlsic2VuZFJlcXVlc3QiXSwibWFwcGluZ3MiOiJBQUNBLG9EQUFvRDtBQUV2QyxhQUFLLEdBQUc7SUFDakIsR0FBRyxFQUFFLFVBQVMsR0FBVyxFQUFFLEtBQWE7UUFDcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBSSxFQUFFLFVBQVMsR0FBVyxFQUFFLE9BQVksRUFBRSxLQUFhO1FBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELEdBQUcsRUFBRSxVQUFTLEdBQVcsRUFBRSxPQUFZLEVBQUUsS0FBYTtRQUNsRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRCxNQUFNLEVBQUUsVUFBUyxHQUFXLEVBQUUsT0FBWSxFQUFFLEtBQWE7UUFDckQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0osQ0FBQTtBQVNELHFCQUFxQixHQUFXLEVBQUUsT0FBWSxFQUFFLElBQVksRUFBRSxLQUFhO0lBQ3ZFQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFTQSxPQUFPQSxFQUFFQSxNQUFNQTtRQUN2QyxJQUFJLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUdwQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFFRCxHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLEdBQUcsQ0FBQyxPQUFPLEdBQUc7WUFDVixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVMLEdBQUcsQ0FBQyxTQUFTLEdBQUc7WUFDZixNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUE7UUFFRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixDQUFDO0lBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtBQUNQQSxDQUFDQSIsImZpbGUiOiJzZXJ2aWNlcy9odHRwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBUT0RPIG1ha2Ugc3RyaW5nIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB3aXRoICcnPycnXG5cbmV4cG9ydCBjb25zdCAkaHR0cCA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKHVybDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh1cmwsIG51bGwsICdHRVQnLCB0b2tlbik7XG4gICAgfSxcbiAgICBwb3N0OiBmdW5jdGlvbih1cmw6IHN0cmluZywgcGF5bG9hZDogYW55LCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh1cmwsIHBheWxvYWQsICdQT1NUJywgdG9rZW4pO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbih1cmw6IHN0cmluZywgcGF5bG9hZDogYW55LCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh1cmwsIHBheWxvYWQsICdQVVQnLCB0b2tlbik7XG4gICAgfSxcbiAgICBkZWxldGU6IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHVybCwgbnVsbCwgJ0RFTEVURScsIHRva2VuKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHVybCBpcyB0aGUgZW5kcG9pbnQgdG8gc2VuZFxuICogQHBhcmFtIHBheUxvYWQgaXMgYSBKYXZhU2NyaXB0L0pTT04gT2JqZWN0XG4gKiBAcGFyYW0gdHlwZSBpcyB0aGUgSFRUUCB2ZXJiIGFzIFN0cmluZ1xuICogQHBhcmFtIHRva2VuIGlzIHVzZWQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHJlc3BvbnNlIGlzIHJlY2VpdmVkXG4qL1xuZnVuY3Rpb24gc2VuZFJlcXVlc3QodXJsOiBzdHJpbmcsIHBheUxvYWQ6IGFueSwgdHlwZTogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxLnRpbWVvdXQgPSAxMCAqIDEwMDA7XG4gICAgICAgIHJlcS5vcGVuKHR5cGUsIHVybCk7XG5cbiAgICAgICAgLy8gc3VwcG9ydCBmb3IgY29udGVudC10eXBlIGluZmVyZW5jZSBhbmQgaGFuZGxpbmcgYWNjb3JkaW5nbHlcbiAgICAgICAgaWYgKHBheUxvYWQgJiYgKHR5cGVvZiBwYXlMb2FkICE9PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZW5kIEpzb24gV2ViIFRva2VuXG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcS5yZXNwb25zZS5zdGFydHNXaXRoKFwie1wiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVxLnJlc3BvbnNlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXEucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEpTT04ucGFyc2UocmVxLnJlc3BvbnNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlamVjdChyZXEucmVzcG9uc2UpO1xuICAgICAgICB9O1xuXG5cdCAgICByZXEub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ICAgIHJlamVjdChcInNlcnZlciBkb2VzIG5vdCByZXNwb25kXCIpO1xuXHQgICAgfVxuXG4gICAgICAgIGlmIChwYXlMb2FkKSB7XG4gICAgICAgICAgICByZXEuc2VuZChKU09OLnN0cmluZ2lmeShwYXlMb2FkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXEuc2VuZChudWxsKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9