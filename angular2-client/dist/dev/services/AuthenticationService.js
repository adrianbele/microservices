var http_1 = require("services/http");
var config_1 = require("../config");
var AuthenticationService = (function () {
    function AuthenticationService() {
        console.log("AuthenticationService constructed with loggedIn [" + this.isLoggedIn() + "] based on localStorage");
    }
    AuthenticationService.prototype.isLoggedIn = function () {
        var token = localStorage.getItem('jwt');
        if (token && !this.isExpired(token)) {
            return true;
        }
        return false;
    };
    AuthenticationService.prototype.logIn = function (token) {
        console.log("AuthenticationService logIn (set jwt in localStorage)");
        localStorage.setItem("jwt", token);
    };
    AuthenticationService.prototype.logOut = function () {
        console.log("AuthenticationService logOut (remove jwt from localStorage)");
        localStorage.removeItem('jwt');
    };
    AuthenticationService.prototype.isExpired = function (token) {
        return (Date.now() > this.getExpireTimestamp(token));
    };
    AuthenticationService.prototype.getExpireTimestamp = function (token) {
        var tokenArr = token.split(".");
        var decodedMeta = this.base64Decode(tokenArr[1]);
        var jsonMeta = JSON.parse(decodedMeta);
        return jsonMeta.exp * 1000;
    };
    AuthenticationService.prototype.getNewToken = function (username, password) {
        return http_1.$http.get(config_1.REST_HOST + "/api/newToken?username=" + username + "&password=" + password, null);
    };
    AuthenticationService.prototype.base64Decode = function (s) {
        var e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length;
        var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (i = 0; i < 64; i++) {
            e[A.charAt(i)] = i;
        }
        for (x = 0; x < L; x++) {
            c = e[s.charAt(x)];
            b = (b << 6) + c;
            l += 6;
            while (l >= 8) {
                ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));
            }
        }
        return r;
    };
    return AuthenticationService;
})();
exports.AuthenticationService = AuthenticationService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL0F1dGhlbnRpY2F0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvblNlcnZpY2UiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuY29uc3RydWN0b3IiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNMb2dnZWRJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dPdXQiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNFeHBpcmVkIiwiQXV0aGVudGljYXRpb25TZXJ2aWNlLmdldEV4cGlyZVRpbWVzdGFtcCIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXROZXdUb2tlbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5iYXNlNjREZWNvZGUiXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFvQixlQUFlLENBQUMsQ0FBQTtBQUNwQyx1QkFBd0IsV0FBVyxDQUFDLENBQUE7QUFFcEM7SUFFSUE7UUFDSUMsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbURBQW1EQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxHQUFHQSx5QkFBeUJBLENBQUNBLENBQUNBO0lBQ3JIQSxDQUFDQTtJQUVERCwwQ0FBVUEsR0FBVkE7UUFDSUUsSUFBSUEsS0FBS0EsR0FBR0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDakJBLENBQUNBO0lBRURGLHFDQUFLQSxHQUFMQSxVQUFNQSxLQUFVQTtRQUNaRyxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSx1REFBdURBLENBQUNBLENBQUNBO1FBQ3JFQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFFREgsc0NBQU1BLEdBQU5BO1FBQ0lJLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLDZEQUE2REEsQ0FBQ0EsQ0FBQ0E7UUFDM0VBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ25DQSxDQUFDQTtJQUVESix5Q0FBU0EsR0FBVEEsVUFBVUEsS0FBYUE7UUFFbkJLLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDekRBLENBQUNBO0lBRURMLGtEQUFrQkEsR0FBbEJBLFVBQW1CQSxLQUFhQTtRQUM1Qk0sSUFBSUEsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDaENBLElBQUlBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2pEQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUN2Q0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDL0JBLENBQUNBO0lBTUROLDJDQUFXQSxHQUFYQSxVQUFZQSxRQUFnQkEsRUFBRUEsUUFBZ0JBO1FBQzFDTyxNQUFNQSxDQUFDQSxZQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxrQkFBU0EsR0FBR0EseUJBQXlCQSxHQUFHQSxRQUFRQSxHQUFHQSxZQUFZQSxHQUFHQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN2R0EsQ0FBQ0E7SUFFT1AsNENBQVlBLEdBQXBCQSxVQUFxQkEsQ0FBU0E7UUFDMUJRLElBQUlBLENBQUNBLEdBQUNBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLEVBQUVBLEVBQUNBLENBQUNBLEdBQUNBLE1BQU1BLENBQUNBLFlBQVlBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1FBQy9EQSxJQUFJQSxDQUFDQSxHQUFDQSxrRUFBa0VBLENBQUNBO1FBQ3pFQSxHQUFHQSxDQUFBQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFDQSxDQUFDQSxHQUFDQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxFQUFDQSxDQUFDQTtZQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUFBQSxDQUFDQTtRQUNwQ0EsR0FBR0EsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsRUFBQ0EsQ0FBQ0E7WUFDYkEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDakNBLE9BQU1BLENBQUNBLElBQUVBLENBQUNBLEVBQUNBLENBQUNBO2dCQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxLQUFHQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUFBQSxDQUFDQTtRQUMvREEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFDTFIsNEJBQUNBO0FBQURBLENBdERBLElBc0RDO0FBdERZLDZCQUFxQix3QkFzRGpDLENBQUEiLCJmaWxlIjoic2VydmljZXMvQXV0aGVudGljYXRpb25TZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHskaHR0cH0gZnJvbSBcInNlcnZpY2VzL2h0dHBcIjtcbmltcG9ydCB7UkVTVF9IT1NUfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5cbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXV0aGVudGljYXRpb25TZXJ2aWNlIGNvbnN0cnVjdGVkIHdpdGggbG9nZ2VkSW4gW1wiICsgdGhpcy5pc0xvZ2dlZEluKCkgKyBcIl0gYmFzZWQgb24gbG9jYWxTdG9yYWdlXCIpO1xuICAgIH1cblxuICAgIGlzTG9nZ2VkSW4oKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdqd3QnKTtcbiAgICAgICAgaWYodG9rZW4gJiYgIXRoaXMuaXNFeHBpcmVkKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxvZ0luKHRva2VuOiBhbnkpOiB2b2lke1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBsb2dJbiAoc2V0IGp3dCBpbiBsb2NhbFN0b3JhZ2UpXCIpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImp3dFwiLCB0b2tlbik7XG4gICAgfVxuXG4gICAgbG9nT3V0KCk6IHZvaWR7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXV0aGVudGljYXRpb25TZXJ2aWNlIGxvZ091dCAocmVtb3ZlIGp3dCBmcm9tIGxvY2FsU3RvcmFnZSlcIik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdqd3QnKTtcbiAgICB9XG5cbiAgICBpc0V4cGlyZWQodG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29tcGFyZSB0aW1lc3RhbXBzOiBcIiArIERhdGUubm93KCkgKyBcIiBhbmQgXCIgKyB0aGlzLmdldEV4cGlyZVRpbWVzdGFtcCh0b2tlbikpO1xuICAgICAgICByZXR1cm4gKERhdGUubm93KCkgPiB0aGlzLmdldEV4cGlyZVRpbWVzdGFtcCh0b2tlbikpO1xuICAgIH1cblxuICAgIGdldEV4cGlyZVRpbWVzdGFtcCh0b2tlbjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHRva2VuQXJyID0gdG9rZW4uc3BsaXQoXCIuXCIpO1xuICAgICAgICBsZXQgZGVjb2RlZE1ldGEgPSB0aGlzLmJhc2U2NERlY29kZSh0b2tlbkFyclsxXSk7XG4gICAgICAgIGxldCBqc29uTWV0YSA9IEpTT04ucGFyc2UoZGVjb2RlZE1ldGEpO1xuICAgICAgICByZXR1cm4ganNvbk1ldGEuZXhwICogMTAwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENhbGwgUkVTVCBhcGkgdG8gcmVxdWVzdCBhIEpXVCB0b2tlblxuICAgICogQHJldHVybiBQcm9taXNlIG9iamVjdFxuICAgICovXG4gICAgZ2V0TmV3VG9rZW4odXNlcm5hbWU6IFN0cmluZywgcGFzc3dvcmQ6IFN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoUkVTVF9IT1NUICsgXCIvYXBpL25ld1Rva2VuP3VzZXJuYW1lPVwiICsgdXNlcm5hbWUgKyBcIiZwYXNzd29yZD1cIiArIHBhc3N3b3JkLCBudWxsKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJhc2U2NERlY29kZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICB2YXIgZT17fSxpLGI9MCxjLHgsbD0wLGEscj0nJyx3PVN0cmluZy5mcm9tQ2hhckNvZGUsTD1zLmxlbmd0aDtcbiAgICAgICAgdmFyIEE9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgICAgIGZvcihpPTA7aTw2NDtpKyspe2VbQS5jaGFyQXQoaSldPWk7fVxuICAgICAgICBmb3IoeD0wO3g8TDt4Kyspe1xuICAgICAgICAgICAgYz1lW3MuY2hhckF0KHgpXTtiPShiPDw2KStjO2wrPTY7XG4gICAgICAgICAgICB3aGlsZShsPj04KXsoKGE9KGI+Pj4obC09OCkpJjB4ZmYpfHwoeDwoTC0yKSkpJiYocis9dyhhKSk7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==